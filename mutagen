#!/bin/bash
## Description: Runs mutagen on the current project
## Usage: mutagen
## Example: "ddev mutagen start" or "ddev mutagen stop"

set -eu -o pipefail

project_name=$(ddev describe -j | jq -r .raw.name)

function require_program {
    if ! type "$1" > /dev/null 2>&1; then
        echo "$1 is required. Please install it and try again."
        exit 1
    fi
}

require_program "mutagen"
require_program "jq"

# Make sure the mutagen daemon is running.
mutagen daemon start

if [ "$1" == "start" ]; then
    if mutagen sync list ${project_name} 2>/dev/null; then
        echo "Mutagen sync for ${project_name} is already running"
        exit 0
    fi

    # Clear out the test files that are bundled with the web container.
    # We don't want those synced back into the project
    ddev exec rm -rf /var/www/html/{test,index.html}

    # Create the sync process from the ddev project
    mutagen sync create . docker://ddev-${project_name}-web/var/www/html --sync-mode=two-way-resolved --symlink-mode=posix-raw --name=${project_name}

    # Wait for the initial sync process to complete, watch for errors, and return
    # when ready.
    echo "Waiting for initial sync to complete"
    while true; do
        if mutagen sync list ${project_name} | grep "Last error"; then
            echo "Mutagen sync has errored -- check 'mutagen sync list $(cat ${mutagen_sync_file})' for the problem"
            break
        fi
        if mutagen sync list ${project_name} | grep "Status: Watching for changes" >/dev/null; then
            echo "Initial mutagen sync has completed. Happy coding!"
            break
        fi

        sleep 3
    done
fi

if [ "$1" == "stop" ]; then
    echo "Ending mutagen sync process"
    mutagen sync flush ${project_name}
    mutagen sync terminate ${project_name}
fi
